%code requires
{
    #include "../inc/types.hpp"
}

%{
    #include <iostream>
    #include <stdio.h> /* For error messages */
    #include <stack>
    #include "../inc/types.hpp"
    #include "../inc/enums.hpp"
    // #define YYDEBUG 1
    int yylex();
    extern int yylineno;
    extern FILE *yyin;
    void yyerror(std::string, int correction=0);

    Program* program;
    Declarations* declarations = new Declarations();
    Registers* registers = new Registers();
    Output* output = new Output();
%}

%union semrec /* The Semantic Records */
{
    long long num; /* Integer values */
    char* pidentifier; /* Identifiers */
    bool direction;
    struct lbs* lbls; /* For backpatching */
    Identifier* id;
    Value* val;
    Condition* cond;
    Expression* exp;
    Command* cmd;
    CommandSet* cSet;
}

%token VAR _BEGIN END ASSIGN IF THEN ELSE ENDIF
%token WHILE DO ENDDO ENDWHILE FOR FROM TO DOWNTO ENDFOR REPEAT UNTIL
%token READ WRITE
%left PLUS MINUS 
%left TIMES DIV MOD
%token EQ NEQ LE GE LEQ GEQ

%token <pidentifier> pidentifier
%token <num> num
%token <direction> direction

%type <id> identifier
%type <val> value
%type <cond> condition
%type <exp> expression
%type <cmd> command
%type <cSet> commands

%%
program:
        VAR declarations _BEGIN commands END    {program = new Program($4); /*program->printAll();*/}
    |   _BEGIN commands END                     {program = new Program($2);}
;
declarations:
        declarations ',' pidentifier                        {declarations->install($3);}
    |   declarations ',' pidentifier '[' num ':' num ']'    {declarations->install($3, $5, $7);}
    |   pidentifier                                         {declarations->install($1);}
    |   pidentifier '[' num ':' num ']'                     {declarations->install($1,$3,$5);}
;
commands:
        commands command        {$1->push_back($2); $$ = $1;}
    |   command                 { CommandSet* set = new CommandSet(); set->push_back($1); $$ = set;}
;
command:
        identifier ASSIGN expression ';'                            {$$ = new AssignCommand($1, $3); declarations->markAsInitialized($1);}
    |   IF condition THEN commands ELSE commands ENDIF              {$$ = new IfElseCommand($2, $4, $6);}
    |   IF condition THEN commands ENDIF                            {$$ = new IfCommand($2, $4);}
    |   WHILE condition DO commands ENDWHILE                        {$$ = new WhileCommand($2, $4);}
    |   REPEAT commands UNTIL condition ';'                         {$$ = new RepeatCommand($2, $4);}
    |   FOR pidentifier FROM value direction value {declarations->install($2, true);
                                                    declarations->install(std::string($2) + std::to_string(1), false);} 
                                                DO commands ENDFOR  {
                                                                    $$ = new ForCommand(new Pidentifier(std::string($2)),
                                                                                        new Pidentifier(std::string($2) + std::to_string(1)),
                                                                                        $4, $6, $9, $5);
                                                                    declarations->remove($2);
                                                                    declarations->remove(std::string($2) + std::to_string(1));}
    |   READ identifier ';'                                         {$$ = new ReadCommand($2); declarations->markAsInitialized($2);}
    |   WRITE value ';'                                             {$$ = new WriteCommand($2);}
;
expression:
        value               {$$ = new SingleExpression($1);}
    |   value PLUS value    {$$ = new BinaryExpression($1, $3, Operations::ADD);}
    |   value MINUS value   {$$ = new BinaryExpression($1, $3, Operations::SUBTRACT);}
    |   value TIMES value   {$$ = new BinaryExpression($1, $3, Operations::MULTIPLY);}
    |   value DIV value     {$$ = new BinaryExpression($1, $3, Operations::DIVIDE);}
    |   value MOD value     {$$ = new BinaryExpression($1, $3, Operations::MOD);}
;
condition:
        value EQ value  {$$ = new Condition($1, $3, Conditions::EQ);}
    |   value NEQ value {$$ = new Condition($1, $3, Conditions::NEQ);}
    |   value LE value  {$$ = new Condition($1, $3, Conditions::LE);}
    |   value GE value  {$$ = new Condition($1, $3, Conditions::GE);}
    |   value LEQ value {$$ = new Condition($1, $3, Conditions::LEQ);}
    |   value GEQ value {$$ = new Condition($1, $3, Conditions::GEQ);}
;
value:
        num         {$$ = new numValue($1);}
    |   identifier  {$$ = new idValue($1);}
;
identifier:
        pidentifier                         {$$ = new Pidentifier(std::string($1));}
    |   pidentifier '[' pidentifier ']'     {$$ = new arrIdentifier(std::string($1), std::string($3));}
    |   pidentifier '[' num ']'             {$$ = new arrIdentifier(std::string($1), $3);}
;
%%

int main(int argc, char** argv){
    if (argc != 3) {
        std::cerr << "Wrong number of arguments!\nTry: \033[1;33m./main $inputFile $outputFile\033[0m" << std::endl;
        exit(1);
    }

    FILE * data = fopen( argv[1], "r" );
    if(!data){
        std::cerr << "error: Cannot open the file: " << argv[1] << std::endl;
        return -1;
    }
    yyin = data;
    printf("\033[1;34mParsing...\033[0m\n");
    // yydebug = 1;
    freopen(argv[2],"w",stderr);
    yyparse();
    printf("\033[1;34mParsed successfully!\nCompiling...\033[0m\n");
    program->compile();
    printf("\033[1;34mCompiled successfully!\033[0m\n");

}

void yyerror(std::string error, int correction){
    std::cout << "\033[1;31merror at line " << yylineno + correction  << " :\033[0m " << error << "\n";
    exit(1);
}