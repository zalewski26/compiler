%code requires
{
    #include "components/types.hpp"
}

%{
    #include <iostream>
    #include <stdlib.h> /* For malloc in symbol table */
    #include <string.h> /* For strcmp in symbol table */
    #include <stdio.h> /* For error messages */
    #include <stack>
    #include "components/types.hpp"
    // #define YYDEBUG 1
    int yylex();
    void yyerror(const char *);

    Program* program;
%}

%union semrec /* The Semantic Records */
{
    int num; /* Integer values */
    char* pidentifier; /* Identifiers */
    struct lbs* lbls; /* For backpatching */
    Identifier* id;
    Value* val;
    Condition* cond;
    Expression* exp;
    Command* cmd;
    CommandSet* cSet;
    IdentifiersSet* dSet;
}

%token VAR _BEGIN END ASSIGN IF THEN ELSE ENDIF
%token WHILE DO ENDDO ENDWHILE FOR FROM TO DOWNTO ENDFOR REPEAT UNTIL
%token READ WRITE
%left PLUS MINUS 
%left TIMES DIV MOD
%token EQ NEQ LE GE LEQ GEQ

%token <pidentifier> pidentifier
%token <num> num

%type <id> identifier
%type <val> value
%type <cond> condition
%type <exp> expression
%type <cmd> command
%type <cSet> commands
%type <dSet> declarations

%%
program:
        VAR declarations _BEGIN commands END    {program = new Program($2, $4); /*program->printAll();*/}
    |   _BEGIN commands END                     {program = new Program($2);}
;
declarations:
        declarations ',' pidentifier                        {$1->push_back(new Pidentifier($3)); $$ = $1;}
    |   declarations ',' pidentifier '[' num ':' num ']'    {$1->push_back(new Pidentifier($3)); $$ = $1;}
    |   pidentifier                                         {IdentifiersSet* set = new IdentifiersSet(); set->push_back(new Pidentifier($1)); $$ = set;}
    |   pidentifier '[' num ':' num ']'                     {IdentifiersSet* set = new IdentifiersSet(); set->push_back(new Pidentifier($1)); $$ = set;}
;
commands:
        commands command        {$1->push_back($2); $$ = $1;}
    |   command                 { CommandSet* set = new CommandSet(); set->push_back($1); $$ = set;}
;
command:
        identifier ASSIGN expression ';'                            {$$ = new AssignCommand($1, $3);}
    |   IF condition THEN commands ELSE commands ENDIF              {$$ = new IfElseCommand($2, $4, $6);}
    |   IF condition THEN commands ENDIF                            {$$ = new IfCommand($2, $4);}
    |   WHILE condition DO commands ENDWHILE                        {$$ = new WhileCommand($2, $4);}
    |   REPEAT commands UNTIL condition ';'                         {$$ = new RepeatCommand($2, $4);}
    |   FOR pidentifier FROM value TO value DO commands ENDFOR      {$$ = new ForToCommand(std::string($2), $4, $6, $8);}
    |   FOR pidentifier FROM value DOWNTO value DO commands ENDFOR  {$$ = new ForDownToCommand(std::string($2), $4, $6, $8);}
    |   READ identifier ';'                                         {$$ = new ReadCommand($2);}
    |   WRITE value ';'                                             {$$ = new WriteCommand($2);}
;
expression:
        value               {$$ = new SingleExpression($1);}
    |   value PLUS value    {$$ = new BinaryExpression($1, $3, 0);}
    |   value MINUS value   {$$ = new BinaryExpression($1, $3, 1);}
    |   value TIMES value   {$$ = new BinaryExpression($1, $3, 2);}
    |   value DIV value     {$$ = new BinaryExpression($1, $3, 3);}
    |   value MOD value     {$$ = new BinaryExpression($1, $3, 4);}
;
condition:
        value EQ value  {$$ = new Condition($1, $3, 0);}
    |   value NEQ value {$$ = new Condition($1, $3, 0);}
    |   value LE value  {$$ = new Condition($1, $3, 0);}
    |   value GE value  {$$ = new Condition($1, $3, 0);}
    |   value LEQ value {$$ = new Condition($1, $3, 0);}
    |   value GEQ value {$$ = new Condition($1, $3, 0);}
;
value:
        num         {$$ = new numValue($1);}
    |   identifier  {$$ = new idValue($1);}
;
identifier:
        pidentifier                         {$$ = new Pidentifier(std::string($1));}
    |   pidentifier '[' pidentifier ']'     {$$ = new Pidentifier(std::string($1));}
    |   pidentifier '[' num ']'             {$$ = new Pidentifier(std::string($1));}
;
%%

int main(){
    printf("\033[1;34mParsing...\033[0m\n");
    // yydebug = 1;
    yyparse();
    printf("\033[1;34mParsed successfully!\nCompiling...\033[0m\n");
    program->compile();
    printf("\033[1;34mCompiled successfully!\033[0m\n");

}

void yyerror(const char* err){
    std::cout << "Error: " << err << std::endl;
}