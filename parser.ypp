%{
    #include <iostream>
    #include <stdlib.h> /* For malloc in symbol table */
    #include <string.h> /* For strcmp in symbol table */
    #include <stdio.h> /* For error messages */
    #include "components/program.cpp"
    #include <stack>
    // #define YYDEBUG 1
    int yylex();
    void yyerror(const char *);

    Program program;
%}

%union semrec /* The Semantic Records */
{
    int num; /* Integer values */
    char* pidentifier; /* Identifiers */
    struct lbs* lbls; /* For backpatching */
}

%token VAR _BEGIN END ASSIGN IF THEN ELSE ENDIF
%token WHILE DO ENDDO ENDWHILE FOR FROM TO DOWNTO ENDFOR REPEAT UNTIL
%token READ WRITE
%left PLUS MINUS 
%left TIMES DIV MOD
%token EQ NEQ LE GE LEQ GEQ

%token <pidentifier> pidentifier
%token <num> num

%%
program:
        VAR declarations _BEGIN commands END
    |   _BEGIN commands END 
;
declarations:
        declarations ',' pidentifier {program.install(std::string($3));}
    |   declarations ',' pidentifier '[' num ':' num ']'
    |   pidentifier {program.install(std::string($1));}
    |   pidentifier '[' num ':' num ']'
;
commands:
        commands command
    |   command
;
command:
        identifier ASSIGN expression ';' 
    |   IF condition THEN commands ELSE commands ENDIF
    |   IF condition THEN commands ENDIF
    |   WHILE condition DO commands ENDWHILE
    |   REPEAT commands UNTIL condition ';'
    |   FOR pidentifier FROM value TO value DO commands ENDFOR
    |   FOR pidentifier FROM value DOWNTO value DO commands ENDFOR
    |   READ identifier ';'
    |   WRITE value ';'
;
expression:
        value
    |   value PLUS value
    |   value MINUS value 
    |   value TIMES value 
    |   value DIV value
    |   value MOD value 
;
condition:
        value EQ value
    |   value NEQ value
    |   value LE value
    |   value GE value
    |   value LEQ value
    |   value GEQ value
;
value:
        num    
    |   identifier
;
identifier:
        pidentifier {program.context_check(std::string($1));}
    |   pidentifier '[' pidentifier ']'
    |   pidentifier '[' num ']'
;
%%

int main(){
    // yydebug = 1;
    return yyparse();
}

void yyerror(const char* err){
    std::cout << "Error: " << err << std::endl;
}